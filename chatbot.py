import streamlit as st

st.title("ü§ñ Chatbot do Sistema")

with st.sidebar:
    st.header("üìã Menu de Op√ß√µes")
    st.write("""
    1. Como cadastrar um produto?
    2. Como cadastrar um pedido?
    3. O que √© dashboard?
    4. O que s√£o as linhas vermelhas na tabela de produtos?
    5. Alarme de estoque baixo
    6. Como funciona os gr√°ficos do dashboard?
    7. Como adicionar produtos ao estoque por pedido cancelado/devolu√ß√£o?
    8. Ajuda
    9. Sair
    """)

# Inicializar hist√≥rico de chat no session_state
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "chat_active" not in st.session_state:
    st.session_state.chat_active = False
if "last_action" not in st.session_state:
    st.session_state.last_action = None

# Exibir hist√≥rico de mensagens
for msg in st.session_state.chat_history:
    if msg["role"] == "user":
        st.write(f"**Voc√™:** {msg['content']}")
    else:
        st.write(f"**Bot:** {msg['content']}")

# Fun√ß√£o para exibir o menu principal

# Fun√ß√£o para processar a escolha do usu√°rio
def processar_escolha(escolha):
    if escolha == "1":
        return "Para cadastrar um produto, v√° para a p√°gina 'Cadastrar Produtos'. Preencha o formul√°rio com o SKU, t√≠tulo, pre√ßo, categoria, quantidade em estoque, marca e, opcionalmente, variantes (como cor ou modelo). Clique em 'Cadastrar Produto' para salvar."
    elif escolha == "2":
        return "Na p√°gina 'Cadastrar Pedidos', selecione o SKU do produto, informe a quantidade, descri√ß√£o, observa√ß√£o, cliente e data do pedido. Clique em 'Cadastrar Pedido'. O sistema verificar√° se h√° estoque suficiente antes de salvar."
    elif escolha == "3":
        return "O Dashboard exibe gr√°ficos e m√©tricas, como o produto mais vendido, total de estoque, valor total dos produtos e movimenta√ß√µes por m√™s. Use os filtros na barra lateral para ajustar as datas ou categorias."
    elif escolha == "4":
        return "As linhas vermelhas na tabela de produtos indicam que o estoque est√° em n√≠vel cr√≠tico (igual ou abaixo de 20 unidades), destacando a necessidade de reposi√ß√£o."
    elif escolha == "5":
        return "O alarme de estoque baixo aparece na p√°gina 'Home' e 'Cadastrar Pedidos' quando produtos t√™m menos de 5 unidades. Voc√™ tamb√©m pode verificar a lista completa na p√°gina 'Base de Produtos'."
    elif escolha == "6":
        return "Os gr√°ficos do dashboard mostram dados como entradas e sa√≠das de estoque por m√™s, top 5 produtos mais vendidos, estoque cr√≠tico vs. m√©dia de vendas e distribui√ß√£o de vendas por categoria. Use os filtros na barra lateral para personalizar as visualiza√ß√µes."
    elif escolha == "7":
        return "Para adicionar produtos ao estoque por pedido cancelado ou devolu√ß√£o, acesse a p√°gina 'Estoque'. Selecione o SKU, escolha o motivo 'Devolu√ß√£o' ou 'Pedido Cancelado', insira a quantidade e o respons√°vel, e clique em 'Registrar movimenta√ß√£o'."
    elif escolha == "8":
        return "Estou aqui para ajudar! Escolha uma op√ß√£o do menu digitando o n√∫mero correspondente ou consulte o menu acima para mais informa√ß√µes."
    elif escolha == "9":
        st.session_state.chat_active = False
        return "Chat finalizado. Clique em 'Iniciar Chat' para come√ßar novamente."
    else:
        return "Op√ß√£o inv√°lida. Por favor, digite um n√∫mero de 1 a 9."

# Bot√µes de controle
col1, col2 = st.columns(2)
with col1:
    if st.button("Limpar Chat", key="limpar"):
        st.session_state.chat_history = []
        st.session_state.chat_active = False
        st.session_state.last_action = "limpar"
        #st.rerun()
with col2:
    if st.button("Iniciar Chat", key="iniciar") and not st.session_state.chat_active:
        st.session_state.chat_active = True
        #st.session_state.chat_history.append({"role": "bot", "content": exibir_menu()})
        st.session_state.last_action = "iniciar"
        #st.rerun()

# Campo de entrada e envio apenas se o chat estiver ativo
if st.session_state.chat_active:
    user_input = st.text_input("Digite o n√∫mero da op√ß√£o desejada:", key="chat_input")
    
    if st.button("Enviar", key="enviar") or (st.session_state.last_action == "enviar" and user_input):
        if user_input and st.session_state.last_action != "enviar":
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            resposta = processar_escolha(user_input)
            st.session_state.chat_history.append({"role": "bot", "content": resposta})
            st.session_state.last_action = "enviar"
            
            if user_input == "9":
                st.session_state.chat_active = False
            
            st.rerun()
        else:
            st.session_state.last_action = None